import math
import re

import nltk
nltk.download('words')

from nltk.corpus import words

def are_at_least_50percent_of_words_in_english(sentence):
    english_words_count = 0
    sentence = sentence.lower()
    sentence = re.sub(r'[^\w\s]','',sentence)
    for word in sentence.split(" "):
        if word in words.words():
            english_words_count += 1
    return english_words_count > len(sentence.split(" "))//2

def encrypt(text, key_a, key_b):
  encrypted_t = ""
  for c in text:
      if not c.lower().isalpha():
          encrypted_t += c
          continue
      encrypted_c = ord(c) - ord("a")
      encrypted_c = encrypted_c*key_a
      encrypted_c = encrypted_c + key_b
      encrypted_c = encrypted_c % 26
      encrypted_t += chr(encrypted_c+ord("a"))
  return encrypted_t

def decrypt(text, key_a, key_b):
    decrypted_t = ""
    for c in text:
        if not c.lower().isalpha():
            decrypted_t += c
            continue
        decrypted_c = ord(c) - ord("a")
        decrypted_c = decrypted_c - key_b
        while decrypted_c % key_a != 0:
            decrypted_c += 26
        decrypted_c = decrypted_c // key_a
        decrypted_c = decrypted_c + ord("a")
        decrypted_t += chr(decrypted_c)
    return decrypted_t

def bruteforce_decrypt(text):
    for key in range(1,150):
        key_a, key_b = divmod(key, len(text))
        if math.gcd(key_a, 26) != 1:
            continue
        decrypted_text = decrypt(text, key_a, key_b)
        if are_at_least_50percent_of_words_in_english(decrypted_text):
            print(decrypt(text, key_a, key_b))

choose = int(input("Enter 1 for encryption, 2 for decryption, 3 for brute force: "))
while not choose in range(1, 4):
   choose = int(input("Enter 1 for encryption, 2 for decryption, 3 for brute force: "))

text = input("Enter text: ")
text = text.lower()

if choose != 3:
    key = int(input("Enter key: "))
    key_a, key_b = divmod(key, len(text))
    while math.gcd(key_a, 26) != 1:
        print("Key " + str(key_a) + " is not coprime with 26, please enter another key")
        key = int(input())
        key_a, key_b = divmod(key, len(text))
    if choose == 1:
        print(encrypt(text, key_a, key_b))
    elif choose == 2:
        print(decrypt(text, key_a, key_b))
else:
    bruteforce_decrypt(text)
