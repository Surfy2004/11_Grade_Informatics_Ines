def get_4_submatrices(A):
    n = len(A)//2
    m = len(A[0])//2
    return A[:n, :m], A[:n, m:], A[n:, :m], A[n:, m:]
 
def strassen(A, B):
    # Base case.
    if len(A) == 1:
        return A*B
 
    # Split into 4.
    a11, a12, a21, a22 = get_4_submatrices(A)
    b11, b12, b21, b22 = get_4_submatrices(B)
 
    # Recursion.
    p1 = strassen(a11,b12 - b22)
    p2 = strassen(a11+a12, b22)
    p3 = strassen(a21+a22, b11)
    p4 = strassen(a22, b21 - b11)
    p5 = strassen(a11 + a22, b11 + b22)
    p6 = strassen(a12-a22, b12 + b22)
    p7 = strassen(a11 - a21, a11 + a12)
 
 
    c11 = p1 + p4 - p5 + p7
    c12 = p3 + p5
    c21 = p2 + p4
    c22 = p1 - p2 + p3 + p6
 
    # Merge matrix.
    C = [[0 for j in range(0, len(A))] for i in range(0, len(A))]
    for i in range(0, len(A)//2):
        for j in range(0, len(A)//2):
            C[i][j] = c11[i][j]
            C[i][j + len(A)//2] = c12[i][j]
            C[i + len(A)//2][j] = c21[i][j]
            C[i + len(A)//2][j + len(A)//2] = c22[i][j]
    return C
